/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_numsymL {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&mo 2>;
                     };

        combo_numsymR {
            timeout-ms = <50>;
            key-positions = <41 42>;
            bindings = <&mo 2>;
                     };

        combo_windows {
            timeout-ms = <50>;
            key-positions = <29 30 31 32>;
            bindings = <&tog 1>;
                     };

        combo_csgo {
            timeout-ms = <50>;
            key-positions = <15 16 17 18>;
            bindings = <&tog 3>;
                     };
          };
};

// Hold-tap behaviors
&mt {
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    quick-tap-ms = <200>;
};

/ {
    keymap {
        compatible = "zmk,keymap";


        layer_macOS{
            bindings = <
    &kp GRAVE  &kp N1           &kp N2         &kp N3     &kp N4  &kp N5  &kp LG(LS(N4))                                                                                          &mo 4          &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &mt EQUAL MINUS
      &kp DEL   &kp Q           &kp W          &kp E      &kp R   &kp T   &kp LG(LS(N2))                                                                                          &kp LG(F)      &kp Y   &kp U   &kp I      &kp O     &kp P     &mt RA(NUMBER_6) BSLH
 &kp CAPSLOCK   &kp A           &kp S          &kp D      &kp F   &kp G   &mt LG(V) LG(C)                    &kp ESC  &kp RCMD              &kp RALT  &kp RIGHT_CONTROL           &kp RA(RC(S))  &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
    &kp LSHFT   &kp Z           &kp X          &kp C      &kp V   &kp B                                               &kp C_VOL_UP          &kp C_MUTE                                           &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp RSHFT
       &tog 1   &RA(RS(RCTRL))  &kp RA(RCTRL)  &kp LEFT  &kp RIGHT                     &kp SPACE  &kp BACKSPACE  &kp C_VOLUME_DOWN          &kp C_PLAY_PAUSE  &kp TAB  &kp ENTER                         &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &mo 2
            >;
        };

        layer_winOS {
            bindings = <
  &kp GRAVE  &kp N1         &kp N2    &kp N3     &kp N4  &kp N5              &kp LC(LA(DEL))                                                                                        &mo 4  &kp N6  &kp N7     &kp N8    &kp N9    &kp N0        &mt EQUAL MINUS
      &kp DEL   &kp Q          &kp W     &kp E      &kp R   &kp T            &kp RA(RS(RCTRL))                                                                                    &kp LG(F)   &kp Y   &kp U      &kp I     &kp O     &kp P  &kp BSLH
 &kp CAPSLOCK   &kp A          &kp S     &kp D      &kp F   &kp G            &mt LC(V) LC(C)         &kp ESC   &kp LEFT_CONTROL                          &kp RALT  &kp RCMD  &kp RA(RC(S))   &kp H   &kp J      &kp K     &kp L  &kp SEMI                &kp SQT
    &kp LSHFT   &kp Z          &kp X     &kp C      &kp V   &kp B                                              &kp C_VOL_UP                        &kp C_MUTE                            &kp N   &kp M  &kp COMMA   &kp DOT  &kp FSLH              &kp RSHFT
        &mo 2  &tog 1  &kp LC(P)  &kp LEFT  &kp RIGHT                            &kp SPACE  &kp BACKSPACE  &kp C_VOLUME_DOWN                  &kp C_PLAY_PAUSE   &kp TAB      &kp ENTER          &kp UP   &kp DOWN  &kp LBKT  &kp RBKT                  &mo 2
            >;
        };

        layer_NUMSYM {
            bindings = <
 &kp EQUAL &kp N1  &kp N2  &kp N3  &kp N4  &kp N5            &tog 2                                                 &tog 2  &none   &none   &none   &none   &none     &kp MINUS
 &trans  &kp EXCLAMATION  &kp AT_SIGN  &kp LEFT_BRACE        &kp RIGHT_BRACE  &kp PIPE             &none                                                   &none  &trans  &kp N7  &kp N8  &kp N9   &trans   &trans
 &trans  &kp HASH         &kp DOLLAR   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE             &none  &trans  &trans                  &trans  &trans   &none  &trans  &kp N4  &kp N5  &kp N6   &trans   &trans
 &trans  &kp PERCENT      &kp CARET    &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &kp TILDE                            &trans                  &trans                  &trans  &kp N1  &kp N2  &kp N3   &trans   &trans
 &trans  &trans  &trans  &kp LEFT  &kp RIGHT                    &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &kp N0   &kp KP_DOT   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &none                                                                          &trans   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none            &bootloader                                                                     &bootloader   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none                  &none   &none   &none                  &bt BT_CLR       &none  &rgb_ug RGB_MEFS_CMD 5   &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none         &none                                  &none                       &none                                       &none       &none       &none   &none   &none   &none
  &none         &none         &none         &none         &none                                &none   &none   &none                       &none  &bl BL_TOG         &rgb_ug RGB_TOG          &bl BL_INC  &bl BL_DEC   &none   &none   &none
            >;
        };

        layer_Layer__4 {
            bindings = <
 &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                            &trans                                                          &tog 4  &trans  &trans  &trans  &trans  &trans  &trans
 &trans        &trans        &trans        &trans        &trans        &trans                       &bootloader                                                          &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans        &trans        &trans        &trans        &trans        &trans            &rgb_ug RGB_MEFS_CMD 5  &bt BT_CLR  &bt BT_CLR                  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans        &trans        &trans        &trans        &trans        &trans                                                &bl BL_INC                  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans        &trans        &trans        &trans        &trans                                          &trans      &trans  &bl BL_DEC                  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

    };
};
